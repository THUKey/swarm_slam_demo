/* Auto-generated by genmsg_cpp for file /home/wangkuan/workspace/ORB_SLAM2/ORB_SLAM2/Examples/ROS/ORB_SLAM2/msg/frame.msg */
#ifndef ORB_SLAM2_MESSAGE_FRAME_H
#define ORB_SLAM2_MESSAGE_FRAME_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "ORB_SLAM2/keypoint.h"
#include "ORB_SLAM2/bow.h"
#include "ORB_SLAM2/feature.h"
#include "ORB_SLAM2/descriptor.h"
#include "ORB_SLAM2/float32Vector.h"

namespace ORB_SLAM2
{
template <class ContainerAllocator>
struct frame_ {
  typedef frame_<ContainerAllocator> Type;

  frame_()
  : header()
  , mnMachineId(0)
  , mTimeStamp(0.0)
  , N(0)
  , mvKeysUn()
  , mBowVec()
  , mFeatVec()
  , mDescriptors()
  , mvbOutlier()
  , mTcw()
  , nNextId(0)
  , mnId(0)
  {
  }

  frame_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , mnMachineId(0)
  , mTimeStamp(0.0)
  , N(0)
  , mvKeysUn(_alloc)
  , mBowVec(_alloc)
  , mFeatVec(_alloc)
  , mDescriptors(_alloc)
  , mvbOutlier(_alloc)
  , mTcw(_alloc)
  , nNextId(0)
  , mnId(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _mnMachineId_type;
  int32_t mnMachineId;

  typedef double _mTimeStamp_type;
  double mTimeStamp;

  typedef int32_t _N_type;
  int32_t N;

  typedef std::vector< ::ORB_SLAM2::keypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::keypoint_<ContainerAllocator> >::other >  _mvKeysUn_type;
  std::vector< ::ORB_SLAM2::keypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::keypoint_<ContainerAllocator> >::other >  mvKeysUn;

  typedef std::vector< ::ORB_SLAM2::bow_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::bow_<ContainerAllocator> >::other >  _mBowVec_type;
  std::vector< ::ORB_SLAM2::bow_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::bow_<ContainerAllocator> >::other >  mBowVec;

  typedef std::vector< ::ORB_SLAM2::feature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::feature_<ContainerAllocator> >::other >  _mFeatVec_type;
  std::vector< ::ORB_SLAM2::feature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::feature_<ContainerAllocator> >::other >  mFeatVec;

  typedef std::vector< ::ORB_SLAM2::descriptor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::descriptor_<ContainerAllocator> >::other >  _mDescriptors_type;
  std::vector< ::ORB_SLAM2::descriptor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::descriptor_<ContainerAllocator> >::other >  mDescriptors;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _mvbOutlier_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  mvbOutlier;

  typedef std::vector< ::ORB_SLAM2::float32Vector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::float32Vector_<ContainerAllocator> >::other >  _mTcw_type;
  std::vector< ::ORB_SLAM2::float32Vector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::float32Vector_<ContainerAllocator> >::other >  mTcw;

  typedef int32_t _nNextId_type;
  int32_t nNextId;

  typedef int32_t _mnId_type;
  int32_t mnId;


  typedef boost::shared_ptr< ::ORB_SLAM2::frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_SLAM2::frame_<ContainerAllocator>  const> ConstPtr;
}; // struct frame
typedef  ::ORB_SLAM2::frame_<std::allocator<void> > frame;

typedef boost::shared_ptr< ::ORB_SLAM2::frame> framePtr;
typedef boost::shared_ptr< ::ORB_SLAM2::frame const> frameConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ORB_SLAM2::frame_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ORB_SLAM2::frame_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ORB_SLAM2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::frame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::frame_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ORB_SLAM2::frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "083ce032fac5ff267ed4fa143763b28a";
  }

  static const char* value(const  ::ORB_SLAM2::frame_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x083ce032fac5ff26ULL;
  static const uint64_t static_value2 = 0x7ed4fa143763b28aULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_SLAM2::frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ORB_SLAM2/frame";
  }

  static const char* value(const  ::ORB_SLAM2::frame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ORB_SLAM2::frame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#this is the msg for Frame info\n\
\n\
#for Sharing Map\n\
int32 mnMachineId\n\
\n\
#Frame timestamp.\n\
float64 mTimeStamp\n\
\n\
#Number of KeyPoints.\n\
int32 N\n\
\n\
## Vector of keypoints (original for visualization) and undistorted (actually used by the system).\n\
## In the stereo case, mvKeysUn is redundant as images must be rectified.\n\
## In the RGB-D case, RGB images can be distorted.\n\
#std::vector<cv::KeyPoint> mvKeys, mvKeysRight\n\
keypoint[] mvKeysUn\n\
\n\
## Corresponding stereo coordinate and depth for each keypoint.\n\
## \"Monocular\" keypoints have a negative value.\n\
#floatVector mvuRight\n\
#std::vector<float> mvDepth\n\
\n\
# Bag of Words Vector structures.\n\
bow[] mBowVec\n\
feature[] mFeatVec\n\
\n\
# ORB descriptor, each row associated to a keypoint.\n\
descriptor[] mDescriptors\n\
\n\
## MapPoints associated to keypoints, NULL pointer if no association.\n\
#std::vector<MapPoint*> mvpMapPoints\n\
# Flag to identify outlier associations.\n\
bool[] mvbOutlier\n\
\n\
# Camera pose.\n\
float32Vector[] mTcw\n\
\n\
# Current and Next Frame id.\n\
int32 nNextId\n\
int32 mnId\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ORB_SLAM2/keypoint\n\
int32 x\n\
int32 y\n\
float32 angle\n\
int32 class_id\n\
int32 octave\n\
float32 response\n\
float32 size\n\
\n\
================================================================================\n\
MSG: ORB_SLAM2/bow\n\
uint32   WordId\n\
float64  WordValue\n\
\n\
================================================================================\n\
MSG: ORB_SLAM2/feature\n\
uint32 NodeId\n\
uint32[]  i_feature\n\
\n\
================================================================================\n\
MSG: ORB_SLAM2/descriptor\n\
uint8[] descriptor\n\
\n\
================================================================================\n\
MSG: ORB_SLAM2/float32Vector\n\
float32[] float32Vector\n\
\n\
";
  }

  static const char* value(const  ::ORB_SLAM2::frame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ORB_SLAM2::frame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ORB_SLAM2::frame_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ORB_SLAM2::frame_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.mnMachineId);
    stream.next(m.mTimeStamp);
    stream.next(m.N);
    stream.next(m.mvKeysUn);
    stream.next(m.mBowVec);
    stream.next(m.mFeatVec);
    stream.next(m.mDescriptors);
    stream.next(m.mvbOutlier);
    stream.next(m.mTcw);
    stream.next(m.nNextId);
    stream.next(m.mnId);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct frame_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_SLAM2::frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ORB_SLAM2::frame_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mnMachineId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mnMachineId);
    s << indent << "mTimeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.mTimeStamp);
    s << indent << "N: ";
    Printer<int32_t>::stream(s, indent + "  ", v.N);
    s << indent << "mvKeysUn[]" << std::endl;
    for (size_t i = 0; i < v.mvKeysUn.size(); ++i)
    {
      s << indent << "  mvKeysUn[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_SLAM2::keypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.mvKeysUn[i]);
    }
    s << indent << "mBowVec[]" << std::endl;
    for (size_t i = 0; i < v.mBowVec.size(); ++i)
    {
      s << indent << "  mBowVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_SLAM2::bow_<ContainerAllocator> >::stream(s, indent + "    ", v.mBowVec[i]);
    }
    s << indent << "mFeatVec[]" << std::endl;
    for (size_t i = 0; i < v.mFeatVec.size(); ++i)
    {
      s << indent << "  mFeatVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_SLAM2::feature_<ContainerAllocator> >::stream(s, indent + "    ", v.mFeatVec[i]);
    }
    s << indent << "mDescriptors[]" << std::endl;
    for (size_t i = 0; i < v.mDescriptors.size(); ++i)
    {
      s << indent << "  mDescriptors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_SLAM2::descriptor_<ContainerAllocator> >::stream(s, indent + "    ", v.mDescriptors[i]);
    }
    s << indent << "mvbOutlier[]" << std::endl;
    for (size_t i = 0; i < v.mvbOutlier.size(); ++i)
    {
      s << indent << "  mvbOutlier[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mvbOutlier[i]);
    }
    s << indent << "mTcw[]" << std::endl;
    for (size_t i = 0; i < v.mTcw.size(); ++i)
    {
      s << indent << "  mTcw[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_SLAM2::float32Vector_<ContainerAllocator> >::stream(s, indent + "    ", v.mTcw[i]);
    }
    s << indent << "nNextId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nNextId);
    s << indent << "mnId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mnId);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_SLAM2_MESSAGE_FRAME_H

