/* Auto-generated by genmsg_cpp for file /home/wangkuan/workspace/ORB_SLAM2/ORB_SLAM2/Examples/ROS/ORB_SLAM2/msg/floatMat.msg */
#ifndef ORB_SLAM2_MESSAGE_FLOATMAT_H
#define ORB_SLAM2_MESSAGE_FLOATMAT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ORB_SLAM2/floatVector.h"

namespace ORB_SLAM2
{
template <class ContainerAllocator>
struct floatMat_ {
  typedef floatMat_<ContainerAllocator> Type;

  floatMat_()
  : floatMat()
  {
  }

  floatMat_(const ContainerAllocator& _alloc)
  : floatMat(_alloc)
  {
  }

  typedef std::vector< ::ORB_SLAM2::floatVector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::floatVector_<ContainerAllocator> >::other >  _floatMat_type;
  std::vector< ::ORB_SLAM2::floatVector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_SLAM2::floatVector_<ContainerAllocator> >::other >  floatMat;


  typedef boost::shared_ptr< ::ORB_SLAM2::floatMat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_SLAM2::floatMat_<ContainerAllocator>  const> ConstPtr;
}; // struct floatMat
typedef  ::ORB_SLAM2::floatMat_<std::allocator<void> > floatMat;

typedef boost::shared_ptr< ::ORB_SLAM2::floatMat> floatMatPtr;
typedef boost::shared_ptr< ::ORB_SLAM2::floatMat const> floatMatConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ORB_SLAM2::floatMat_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ORB_SLAM2::floatMat_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ORB_SLAM2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::floatMat_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::floatMat_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ORB_SLAM2::floatMat_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d71c38eafa0130e41af0a73511799488";
  }

  static const char* value(const  ::ORB_SLAM2::floatMat_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd71c38eafa0130e4ULL;
  static const uint64_t static_value2 = 0x1af0a73511799488ULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_SLAM2::floatMat_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ORB_SLAM2/floatMat";
  }

  static const char* value(const  ::ORB_SLAM2::floatMat_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ORB_SLAM2::floatMat_<ContainerAllocator> > {
  static const char* value() 
  {
    return "floatVector[] floatMat\n\
\n\
================================================================================\n\
MSG: ORB_SLAM2/floatVector\n\
float64[] floatVector\n\
\n\
";
  }

  static const char* value(const  ::ORB_SLAM2::floatMat_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ORB_SLAM2::floatMat_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.floatMat);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct floatMat_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_SLAM2::floatMat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ORB_SLAM2::floatMat_<ContainerAllocator> & v) 
  {
    s << indent << "floatMat[]" << std::endl;
    for (size_t i = 0; i < v.floatMat.size(); ++i)
    {
      s << indent << "  floatMat[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_SLAM2::floatVector_<ContainerAllocator> >::stream(s, indent + "    ", v.floatMat[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_SLAM2_MESSAGE_FLOATMAT_H

