/* Auto-generated by genmsg_cpp for file /home/wangkuan/workspace/ORB_SLAM2/ORB_SLAM2/Examples/ROS/ORB_SLAM2/msg/feature.msg */
#ifndef ORB_SLAM2_MESSAGE_FEATURE_H
#define ORB_SLAM2_MESSAGE_FEATURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ORB_SLAM2
{
template <class ContainerAllocator>
struct feature_ {
  typedef feature_<ContainerAllocator> Type;

  feature_()
  : NodeId(0)
  , i_feature()
  {
  }

  feature_(const ContainerAllocator& _alloc)
  : NodeId(0)
  , i_feature(_alloc)
  {
  }

  typedef uint32_t _NodeId_type;
  uint32_t NodeId;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _i_feature_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  i_feature;


  typedef boost::shared_ptr< ::ORB_SLAM2::feature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_SLAM2::feature_<ContainerAllocator>  const> ConstPtr;
}; // struct feature
typedef  ::ORB_SLAM2::feature_<std::allocator<void> > feature;

typedef boost::shared_ptr< ::ORB_SLAM2::feature> featurePtr;
typedef boost::shared_ptr< ::ORB_SLAM2::feature const> featureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ORB_SLAM2::feature_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ORB_SLAM2::feature_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ORB_SLAM2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::feature_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::feature_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ORB_SLAM2::feature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca50de4091f080aeaf7b1cb6ed0ab48e";
  }

  static const char* value(const  ::ORB_SLAM2::feature_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xca50de4091f080aeULL;
  static const uint64_t static_value2 = 0xaf7b1cb6ed0ab48eULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_SLAM2::feature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ORB_SLAM2/feature";
  }

  static const char* value(const  ::ORB_SLAM2::feature_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ORB_SLAM2::feature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 NodeId\n\
uint32[]  i_feature\n\
\n\
";
  }

  static const char* value(const  ::ORB_SLAM2::feature_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ORB_SLAM2::feature_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.NodeId);
    stream.next(m.i_feature);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct feature_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_SLAM2::feature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ORB_SLAM2::feature_<ContainerAllocator> & v) 
  {
    s << indent << "NodeId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.NodeId);
    s << indent << "i_feature[]" << std::endl;
    for (size_t i = 0; i < v.i_feature.size(); ++i)
    {
      s << indent << "  i_feature[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.i_feature[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_SLAM2_MESSAGE_FEATURE_H

